from my_string_boost import *
#basic c-tor
basic_ctor=MyString()
assert(str(basic_ctor)=="")
#string ctor
str_ctor=MyString("lorem ipsum")
assert(str(str_ctor)=="lorem ipsum")
#n char ctor
n_str_ctor=MyString("lorem ipsum",5)
assert(str(n_str_ctor)=="lorem")
#copy ctor
copy_ctor=MyString(n_str_ctor)
assert(str(copy_ctor)=="lorem")
#empty
assert(not copy_ctor.empty())
assert(MyString().empty)
#length
assert(n_str_ctor.length()==5)
n_str_ctor.clear()
assert(str(n_str_ctor)=="")
assert(n_str_ctor.length()==0)
#indexing
str_ctor[0]="0"
assert(str(str_ctor)=="0orem ipsum")
assert(str_ctor[0]=="0")
#operator testing
less=MyString("abc little")
bigger=MyString("def large")
assert(less<bigger)
assert(bigger>less)
assert(bigger!=less)
assert(less<=bigger)
assert(bigger>=less)
assert(bigger==MyString(bigger))
assert(str(bigger+less)=="def large"+"abc little")
empty=MyString()
empty.insert(0,"lorem")
assert(str(empty)=="lorem")
empty.insert(5," ipsumm",6)
assert(str(empty)=="lorem ipsum")
empty.erase(5,empty.length()-5)
assert(str(empty)=="lorem")
empty.erase(0,empty.length())
assert(str(empty)=="")
empty.append("lorem")
assert(str(empty)=="lorem")
empty.append(" ",0)
empty.append("lorem ipsum",6,5)
assert(str(empty)=="lorem ipsum")
empty.clear()
empty.insert(0,"lorem ipsum")
assert(str(empty.substr(6))=="ipsum")
assert(str(empty.substr(6,2))=="ip")
empty.replace(0,5,"ipsum")
assert(str(empty)=="ipsum ipsum")
empty.replace(0,empty.length(),"lorem ipsum")
assert(str(empty)=="lorem ipsum")
assert(empty.find("ipsum")==6)
assert(empty.find("ipsum",3)==6)
assert(empty.find("ipsum",7)==-1)